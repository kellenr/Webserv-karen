/*
// ============================================================================
// ENHANCED TEMPLATE PROCESSING WITH ACTION SUPPORT
// ============================================================================

// Update your file size validation:
bool validateUploadFileSize(size_t fileSize, const ServerConfig& config) {
    size_t maxSize = config.client_max_body_size;
    if (maxSize == 0) {
        // 100MB default (good for videos and large files)
        maxSize = 100 * 1024 * 1024; // 100MB
    }

    if (fileSize > maxSize) {
        std::cout << "‚ö†Ô∏è File size " << fileSize << " exceeds limit " << maxSize << std::endl;
        std::cout << "üìä File size: " << (fileSize / 1024 / 1024) << "MB, Limit: " << (maxSize / 1024 / 1024) << "MB" << std::endl;
        return false;
    }

    return true;
}

// ============================================================================
// ENHANCED TEMPLATE VARIABLE REPLACEMENT
// ============================================================================

// Option 1: Enhanced function with action parameter
void replaceTemplateVariables(std::string& templateContent, const std::string& filename, const std::string& action = "uploaded") {
    // Replace {{action}} with the specified action ("uploaded" or "deleted")
    size_t pos = 0;
    while ((pos = templateContent.find("{{action}}", pos)) != std::string::npos) {
        templateContent.replace(pos, 10, action);
        pos += action.length();
    }

    // Replace {{filename}} with actual filename
    pos = 0;
    while ((pos = templateContent.find("{{filename}}", pos)) != std::string::npos) {
        templateContent.replace(pos, 12, filename);
        pos += filename.length();
    }

    std::cout << "‚úÖ Template variables processed (action: " << action << ", filename: " << filename << ")" << std::endl;
}

// ============================================================================
// UPDATE YOUR LOAD TEMPLATE FUNCTIONS
// ============================================================================

// For uploads:
std::string loadAndProcessSuccessTemplate(const ServerConfig& config, const std::string& filename) {
    std::string successPath = config.root + "/templates/success.html";
    std::ifstream successFile(successPath.c_str());
    std::string templateContent;

    if (successFile.is_open()) {
        std::cout << "‚úÖ Loading success template from: " << successPath << std::endl;

        templateContent.assign((std::istreambuf_iterator<char>(successFile)),
                              std::istreambuf_iterator<char>());
        successFile.close();

        // Process template with "uploaded" action
        replaceTemplateVariables(templateContent, filename, "uploaded");

    } else {
        std::cout << "‚ö†Ô∏è Success template not found at: " << successPath << std::endl;

        std::ostringstream fallback;
        fallback << "<!DOCTYPE html>\n";
        fallback << "<html><head><title>Upload Successful</title>";
        fallback << "<link rel=\"stylesheet\" href=\"/style.css\"></head>\n";
        fallback << "<body><div class=\"container text-center\">\n";
        fallback << "<h1>‚úÖ Upload Successful!</h1>\n";
        fallback << "<p>File <strong>" << filename << "</strong> uploaded successfully.</p>\n";
        fallback << "<div class=\"nav-buttons\">";
        fallback << "<a href=\"/upload\" class=\"nav-btn\">üì∏ Upload Another</a> ";
        fallback << "<a href=\"/\" class=\"nav-btn\">üè† Go Home</a>";
        fallback << "</div></div></body></html>\n";
        templateContent = fallback.str();
    }

    return templateContent;
}

// For deletions (add this new function):
std::string loadAndProcessDeleteTemplate(const ServerConfig& config, const std::string& filename) {
    std::string successPath = config.root + "/templates/success.html";
    std::ifstream successFile(successPath.c_str());
    std::string templateContent;

    if (successFile.is_open()) {
        std::cout << "‚úÖ Loading success template for deletion from: " << successPath << std::endl;

        templateContent.assign((std::istreambuf_iterator<char>(successFile)),
                              std::istreambuf_iterator<char>());
        successFile.close();

        // Process template with "deleted" action
        replaceTemplateVariables(templateContent, filename, "deleted");

    } else {
        std::cout << "‚ö†Ô∏è Success template not found, using fallback for deletion" << std::endl;

        std::ostringstream fallback;
        fallback << "<!DOCTYPE html>\n";
        fallback << "<html><head><title>File Deleted</title>";
        fallback << "<link rel=\"stylesheet\" href=\"/style.css\"></head>\n";
        fallback << "<body><div class=\"container text-center\">\n";
        fallback << "<h1>üóëÔ∏è File Deleted Successfully!</h1>\n";
        fallback << "<p>File <strong>" << filename << "</strong> has been deleted.</p>\n";
        fallback << "<div class=\"nav-buttons\">";
        fallback << "<a href=\"/upload\" class=\"nav-btn\">üì∏ Upload New File</a> ";
        fallback << "<a href=\"/\" class=\"nav-btn\">üè† Go Home</a>";
        fallback << "</div></div></body></html>\n";
        templateContent = fallback.str();
    }

    return templateContent;
}


// ============================================================================
// USAGE EXAMPLES
// ============================================================================

/*
Now your success.html template can handle both cases:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{{action}} Successful!</title>
    <link rel="stylesheet" href="/style.css">
</head>
<body>
    <div class="container text-center">
        <h1>
            <span class="sparkle sparkle-1">‚ú®</span>
            {{action}} Successful! üéâ
            <span class="sparkle sparkle-2">‚ú®</span>
        </h1>
        <p>Your file <strong>{{filename}}</strong> has been {{action}} successfully!</p>

        <div class="nav-buttons">
            <a href="/upload" class="nav-btn">üì∏ Upload Another</a>
            <a href="/" class="nav-btn">üè† Go Home</a>
        </div>
    </div>
</body>
</html>

This will show:
- "uploaded Successful!" and "has been uploaded successfully!" for uploads
- "deleted Successful!" and "has been deleted successfully!" for deletions
*/


/*
.error-actions {
			display: flex;
			gap: 15px;
			justify-content: center;
			margin-top: 30px;
			flex-wrap: wrap;
		}

		.home-link.secondary {
			background-color: transparent;
			color: #ff1493;
			border: 2px solid #ff1493;
		}

		.home-link.secondary:hover {
			background-color: #ff1493;
			color: white;
		}

		.home-link.primary {
			background-color: #ff1493;
			color: white;
		}

		.home-link.primary:hover {
			background-color: #cc3366;
		}
*/